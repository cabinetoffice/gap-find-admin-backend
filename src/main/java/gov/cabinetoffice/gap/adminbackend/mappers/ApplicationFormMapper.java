package gov.cabinetoffice.gap.adminbackend.mappers;

import gov.cabinetoffice.gap.adminbackend.dtos.application.*;
import gov.cabinetoffice.gap.adminbackend.dtos.application.questions.QuestionGenericPatchDTO;
import gov.cabinetoffice.gap.adminbackend.dtos.application.questions.QuestionGenericPostDTO;
import gov.cabinetoffice.gap.adminbackend.dtos.application.questions.QuestionOptionsPatchDTO;
import gov.cabinetoffice.gap.adminbackend.dtos.application.questions.QuestionOptionsPostDTO;
import gov.cabinetoffice.gap.adminbackend.entities.ApplicationFormEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Mapper(componentModel = "spring")
public interface ApplicationFormMapper {

    QuestionGenericPatchDTO questionDtoToQuestionGenericPatch(ApplicationFormQuestionDTO applicationFormDTO);

    QuestionOptionsPatchDTO questionDtoToQuestionOptionsPatch(ApplicationFormQuestionDTO applicationFormDTO);

    QuestionGenericPostDTO questionDtoToQuestionGenericPost(ApplicationFormQuestionDTO applicationFormDTO);

    QuestionOptionsPostDTO questionDtoToQuestionOptionsPost(ApplicationFormQuestionDTO applicationFormDTO);

    ApplicationFormQuestionDTO genericQuestionPostToQuestionDto(QuestionGenericPostDTO questionGenericPostDTO);

    ApplicationFormQuestionDTO optionsQuestionPostToQuestionDto(QuestionOptionsPostDTO questionOptionsPostDTO);

    ApplicationFormEntity applicationExistsDtoToEntity(ApplicationFormExistsDTO existsDto);

    @Mapping(source = "version", target = "audit.version")
    @Mapping(source = "created", target = "audit.created")
    @Mapping(source = "createdBy", target = "audit.createdBy")
    @Mapping(source = "lastUpdated", target = "audit.lastUpdated")
    @Mapping(source = "lastUpdateBy", target = "audit.lastUpdateBy")
    @Mapping(source = "lastPublished", target = "audit.lastPublished")
    @Mapping(source = "definition.sections", target = "sections")
    ApplicationFormDTO applicationEntityToDto(ApplicationFormEntity entity);

    @Mapping(source = "version", target = "audit.version")
    @Mapping(source = "created", target = "audit.created")
    @Mapping(source = "createdBy", target = "audit.createdBy")
    @Mapping(source = "lastUpdated", target = "audit.lastUpdated")
    @Mapping(source = "lastPublished", target = "audit.lastPublished")
    @Mapping(source = "lastUpdateBy", target = "audit.lastUpdateBy")
    ApplicationFormDTO applicationEntityNoSectionsToDto(ApplicationFormNoSections entity);

    ApplicationFormsFoundDTO applicationFormFoundViewToDTO(ApplicationFormsFoundView foundView);

    List<ApplicationFormsFoundDTO> applicationFormFoundViewToDTO(List<ApplicationFormsFoundView> foundView);

    void updateApplicationEntityFromPatchDto(ApplicationFormPatchDTO patchDTO,
            @MappingTarget ApplicationFormEntity applicationFormEntity);

    // this method is 95% primarily generated by MapStruct, with a modification to change
    // how MapStruct handles maps
    // this will prevent MapStruct from clearing out the validation map when we want to
    // add/update a single value
    default void updateGenericQuestionPatchToQuestionDto(QuestionGenericPatchDTO questionGenericPatchDTO,
            @MappingTarget ApplicationFormQuestionDTO questionDto) {
        if (questionGenericPatchDTO == null) {
            return;
        }

        if (questionGenericPatchDTO.getProfileField() != null) {
            questionDto.setProfileField(questionGenericPatchDTO.getProfileField());
        }
        if (questionGenericPatchDTO.getFieldTitle() != null) {
            questionDto.setFieldTitle(questionGenericPatchDTO.getFieldTitle());
        }
        if (questionGenericPatchDTO.getHintText() != null) {
            questionDto.setHintText(questionGenericPatchDTO.getHintText());
        }
        if (questionGenericPatchDTO.getDisplayText() != null) {
            questionDto.setDisplayText(questionGenericPatchDTO.getDisplayText());
        }
        if (questionGenericPatchDTO.getQuestionSuffix() != null) {
            questionDto.setQuestionSuffix(questionGenericPatchDTO.getQuestionSuffix());
        }
        if (questionDto.getValidation() != null) {
            Map<String, Object> map = questionGenericPatchDTO.getValidation();
            if (map != null) {
                questionDto.getValidation().putAll(map);
            }
        }
        else {
            Map<String, Object> map = questionGenericPatchDTO.getValidation();
            if (map != null) {
                questionDto.setValidation(map);
            }
        }
    }

    default void updateOptionsQuestionPatchToQuestionDto(QuestionOptionsPatchDTO questionOptionsPatchDTO,
            @MappingTarget ApplicationFormQuestionDTO questionDto) {
        if (questionOptionsPatchDTO == null) {
            return;
        }

        if (questionOptionsPatchDTO.getProfileField() != null) {
            questionDto.setProfileField(questionOptionsPatchDTO.getProfileField());
        }
        if (questionOptionsPatchDTO.getFieldTitle() != null) {
            questionDto.setFieldTitle(questionOptionsPatchDTO.getFieldTitle());
        }
        if (questionOptionsPatchDTO.getHintText() != null) {
            questionDto.setHintText(questionOptionsPatchDTO.getHintText());
        }
        if (questionOptionsPatchDTO.getDisplayText() != null) {
            questionDto.setDisplayText(questionOptionsPatchDTO.getDisplayText());
        }
        if (questionOptionsPatchDTO.getQuestionSuffix() != null) {
            questionDto.setQuestionSuffix(questionOptionsPatchDTO.getQuestionSuffix());
        }
        if (questionDto.getValidation() != null) {
            Map<String, Object> map = questionOptionsPatchDTO.getValidation();
            if (map != null) {
                questionDto.getValidation().putAll(map);
            }
        }
        else {
            Map<String, Object> map = questionOptionsPatchDTO.getValidation();
            if (map != null) {
                questionDto.setValidation(map);
            }
        }
        if (questionDto.getOptions() != null) {
            List<String> list = questionOptionsPatchDTO.getOptions();
            if (list != null) {
                questionDto.getOptions().clear();
                questionDto.getOptions().addAll(list);
            }
        }
        else {
            List<String> list = questionOptionsPatchDTO.getOptions();
            if (list != null) {
                questionDto.setOptions(new ArrayList<>(list));
            }
        }
    }

}
